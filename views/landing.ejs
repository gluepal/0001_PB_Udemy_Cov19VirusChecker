<% include partials/header %>

    <div class="container">
    <header class="jumbotron">
        <div class="container">
            <h1>新型コロナウイルス感染者数確認WEBアプリ</h1>
            <p>新型コロナウイルスの現在の感染者の統計を確認する為のWEBアプリです。</p>
        </div>
    </header>
    
    <%
    // show date
    function dateToStr24H(date, format) {
        if (!format) {
            format = 'Y/M/D h:m:s';
        }
        format = format.replace(/Y/g, date.getFullYear());
        format = format.replace(/M/g, (date.getMonth() + 1));
        format = format.replace(/D/g, date.getDate());
        format = format.replace(/h/g, date.getHours());
        format = format.replace(/m/g, date.getMinutes());
        format = format.replace(/s/g, date.getSeconds());
        return format;
    }
    %>


    <%
    var arrayCorona = [];
    coronavirustimelines.forEach(function(coronavirustimeline, i){
        arrayCorona.push(coronavirustimeline.countryName);
    });
    // 重複を削除したリスト
    var repeatDeleteArray = arrayCorona.filter(function (x, i, self) {
        return self.indexOf(x) === i;
    });
    %>

    <% 
    var repeatDeleteArray_4_currentConfirmedCount = [];
    var repeatDeleteArray_4_confirmedCount = [];
    var repeatDeleteArray_4_curedCount = [];
    var repeatDeleteArray_4_deadCount = [];
    coronavirustimelines.forEach(function(coronavirustimeline, i){
        repeatDeleteArray_4_currentConfirmedCount.push({
            countryName: coronavirustimeline.countryName,
            provinceName: coronavirustimeline.provinceName,
            currentConfirmedCount: coronavirustimeline.currentConfirmedCount
        });
        repeatDeleteArray_4_confirmedCount.push({
            countryName: coronavirustimeline.countryName,
            provinceName: coronavirustimeline.provinceName,
            confirmedCount: coronavirustimeline.confirmedCount
        });
        repeatDeleteArray_4_curedCount.push({
            countryName: coronavirustimeline.countryName,
            provinceName: coronavirustimeline.provinceName,
            curedCount: coronavirustimeline.curedCount
        });
        repeatDeleteArray_4_deadCount.push({
            countryName: coronavirustimeline.countryName,
            provinceName: coronavirustimeline.provinceName,
            deadCount: coronavirustimeline.deadCount
        });
    });
    
    var removeDuplicated_Array = [];

    // sort and consolidate element
    for(let i = 0; i < repeatDeleteArray.length; i++) {
        /* For currentConfirmed */
        var mfilter_currentConfirmedCountArray = repeatDeleteArray_4_currentConfirmedCount.filter(element => element.countryName == repeatDeleteArray[i]);
        /* For confirmed */
        var mfilter_confirmedCountArray = repeatDeleteArray_4_confirmedCount.filter(element => element.countryName == repeatDeleteArray[i]);
        /* For curedCount */
        var mfilter_curedCountArray = repeatDeleteArray_4_curedCount.filter(element => element.countryName == repeatDeleteArray[i]);
        /* For deadCount */
        var mfilter_deadCountArray = repeatDeleteArray_4_deadCount.filter(element => element.countryName == repeatDeleteArray[i]);
        var mCurrentConfirmedCount = 0;
        var mConfirmedCount = 0;
        var mCuredCount = 0;
        var mDeadCount = 0;

        for(let j = 0; j < mfilter_currentConfirmedCountArray.length; j++) {
            mCurrentConfirmedCount += mfilter_currentConfirmedCountArray[j].currentConfirmedCount;
            mConfirmedCount += mfilter_confirmedCountArray[j].confirmedCount;
            mCuredCount += mfilter_curedCountArray[j].curedCount;
            mDeadCount += mfilter_deadCountArray[j].deadCount;
        }
        // console.log(mCurrentConfirmedCount);
        removeDuplicated_Array.push({
            countryName: mfilter_currentConfirmedCountArray[0].countryName,
            provinceName: mfilter_currentConfirmedCountArray[0].provinceName,
            currentConfirmedCount: mCurrentConfirmedCount,
            confirmedCount: mConfirmedCount,
            curedCount: mCuredCount,
            deadCount: mDeadCount
        });
    }
    
    // Sort Function
    function compareValues(key, order = 'asc') {
      return function innerSort(a, b) {
        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
          // property doesn't exist on either object
          return 0;
        }
    
        const varA = (typeof a[key] === 'string')
          ? a[key].toUpperCase() : a[key];
        const varB = (typeof b[key] === 'string')
          ? b[key].toUpperCase() : b[key];
    
        let comparison = 0;
        if (varA > varB) {
          comparison = 1;
        } else if (varA < varB) {
          comparison = -1;
        }
        return (
          (order === 'desc') ? (comparison * -1) : comparison
        );
      };
    }
    removeDuplicated_Array.sort(compareValues('currentConfirmedCount', 'desc'));
    %>
    
    <div class="row">
        <%= "データ取得日時: " + dateToStr24H(gotDate, 'Y年M月D日 h時m分') %>
    </div>
    
    <div class="row" style="display:flex; flex-wrap: wrap;">
        <table class="table table-striped  table-dark">
          <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">国、場所名</th>
              <th scope="col">総合感染者数</th>
              <th scope="col">現在の感染者数</th>
              <th scope="col">治癒者数</th>
              <th scope="col">死者数</th>
            </tr>
          </thead>
        　<tbody>
            <% for(let i = 0; i < removeDuplicated_Array.length; i++) { %>
                <tr>
                <th scope="row"><%= i+1 %></th>
                <td><%= removeDuplicated_Array[i].countryName %></td>
                <td><%= removeDuplicated_Array[i].confirmedCount %></td>
                <td><%= removeDuplicated_Array[i].currentConfirmedCount %></td>
                <td><%= removeDuplicated_Array[i].curedCount %></td>
                <td><%= removeDuplicated_Array[i].deadCount %></td>
                </tr>
            <% } %>
          </tbody>
        </table>
    </div>

    </div>

<% include partials/footer %>


